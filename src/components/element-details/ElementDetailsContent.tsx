import React from 'react';
import { Element } from '../../data/elementTypes';
import { useValidatedTranslation } from '../../hooks/useValidatedTranslation';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '../ui/tabs';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–æ–∫
import OverviewTab from './tabs/OverviewTab';
import PropertiesTab from './tabs/PropertiesTab';
import StructureTab from './tabs/StructureTab';
import ApplicationsTab from './tabs/ApplicationsTab';
import HistoryTab from './tabs/HistoryTab';
import CompoundsTab from './tabs/CompoundsTab';
import BioTab from './tabs/BioTab';
import ProductionTab from './tabs/ProductionTab';
import SafetyTab from './tabs/SafetyTab';
import OccurrenceTab from './tabs/OccurrenceTab';

interface ElementDetailsContentProps {
  element: Element;
}

const ElementDetailsContent: React.FC<ElementDetailsContentProps> = ({ element }) => {
  const { t } = useValidatedTranslation('ElementDetailsContent');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
  const getContentAvailability = () => {
    return {
      overview: true, // –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
      properties: !!(element.melt || element.boil || element.density || element.conductivity || element.heat || element.ionize),
      structure: !!(element.electronstring || element.electrons || element.quantum || element.isotopes),
      applications: !!(element.applications || !element.radioactive),
      history: !!(element.discover || element.history),
      compounds: true, // –∑–∞–≥–ª—É—à–∫–∞ –ø–æ–∫–∞ —á—Ç–æ
      bio: true, // –∑–∞–≥–ª—É—à–∫–∞ –ø–æ–∫–∞ —á—Ç–æ  
      production: true, // –∑–∞–≥–ª—É—à–∫–∞ –ø–æ–∫–∞ —á—Ç–æ
      safety: !!(element.radioactive || element.safety),
      occurrence: !!(element.abundance || element.production?.sources)
    };
  };

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const getDataCount = (tabId: string): number => {
    switch(tabId) {
      case 'overview':
        let count = 3; // –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
        if (element.description) count++;
        if (element.radius) count++;
        if (element.abundance) count++;
        if (element.radioactive) count++;
        return count;
      
      case 'properties':
        let propCount = 0;
        if (element.melt || element.boil) propCount++;
        if (element.density) propCount++;
        if (element.conductivity) propCount++;
        if (element.electroneg || element.valence || element.oxidation || element.affinity) propCount++;
        if (element.ionize && Object.keys(element.ionize).length > 0) propCount++;
        if (element.heat) propCount++;
        return propCount;
      
      case 'structure':
        let structCount = 0;
        if (element.electronstring) structCount++;
        if (element.electrons) structCount++;
        if (element.quantum) structCount++;
        if (element.isotopes) structCount++;
        if (element.radius) structCount++;
        return structCount;
      
      default:
        return 0;
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  const getAvailableTabs = () => {
    const availability = getContentAvailability();
    
    const allTabs = [
      { 
        id: 'overview', 
        label: '–û–±–∑–æ—Ä', 
        component: OverviewTab, 
        alwaysShow: true,
        icon: 'üìã',
        description: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ'
      },
      { 
        id: 'properties', 
        label: '–°–≤–æ–π—Å—Ç–≤–∞', 
        component: PropertiesTab, 
        alwaysShow: true,
        icon: '‚öóÔ∏è',
        description: '–§–∏–∑–∏—á–µ—Å–∫–∏–µ –∏ —Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞'
      },
      { 
        id: 'structure', 
        label: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞', 
        component: StructureTab, 
        alwaysShow: true,
        icon: '‚öõÔ∏è',
        description: '–ê—Ç–æ–º–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –∏–∑–æ—Ç–æ–ø—ã'
      },
      { 
        id: 'applications', 
        label: '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ', 
        component: ApplicationsTab, 
        alwaysShow: false,
        icon: 'üîß',
        description: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ'
      },
      { 
        id: 'history', 
        label: '–ò—Å—Ç–æ—Ä–∏—è', 
        component: HistoryTab, 
        alwaysShow: false,
        icon: 'üìö',
        description: '–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è'
      },
      { 
        id: 'compounds', 
        label: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 
        component: CompoundsTab, 
        alwaysShow: false,
        icon: 'üß™',
        description: '–•–∏–º–∏—á–µ—Å–∫–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'
      },
      { 
        id: 'bio', 
        label: '–ë–∏–æ–ª–æ–≥–∏—è', 
        component: BioTab, 
        alwaysShow: false,
        icon: 'üß¨',
        description: '–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ä–æ–ª—å'
      },
      { 
        id: 'production', 
        label: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', 
        component: ProductionTab, 
        alwaysShow: false,
        icon: 'üè≠',
        description: '–ú–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è'
      },
      { 
        id: 'safety', 
        label: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 
        component: SafetyTab, 
        alwaysShow: false,
        icon: '‚ö†Ô∏è',
        description: '–ú–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'
      },
      { 
        id: 'occurrence', 
        label: '–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ', 
        component: OccurrenceTab, 
        alwaysShow: false,
        icon: 'üåç',
        description: '–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–∏—Ä–æ–¥–µ'
      }
    ];

    // –î–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ –≤–∫–ª–∞–¥–æ–∫
    const atomicNumber = parseInt(element.atomic);
    const showExtendedTabs = atomicNumber <= 30 || [26, 29, 47, 79, 82].includes(atomicNumber); // –ü–µ—Ä–≤—ã–µ 30 + –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

    return allTabs.filter(tab => {
      if (tab.alwaysShow) return true;
      if (showExtendedTabs) return true;
      return availability[tab.id as keyof typeof availability];
    });
  };

  const availableTabs = getAvailableTabs();

  return (
    <div className="element-details-content w-full min-h-[700px]">
      <Tabs defaultValue="overview" className="w-full">
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */}
        <div className="tabs-navigation mb-8 bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h2 className="text-xl font-bold text-gray-800 dark:text-gray-200 flex items-center">
              <span className="text-2xl mr-3">üìä</span>
              –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ {element.name}
            </h2>
            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
              –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–∞
            </p>
          </div>
          
          <div className="p-4">
            <TabsList className="grid w-full gap-2 bg-gray-50 dark:bg-gray-900 p-2 rounded-lg" style={{
              gridTemplateColumns: `repeat(${Math.min(availableTabs.length, 5)}, 1fr)`
            }}>
              {availableTabs.map(tab => {
                const dataCount = getDataCount(tab.id);
                return (
                  <TabsTrigger 
                    key={tab.id} 
                    value={tab.id}
                    className="data-[state=active]:bg-blue-600 data-[state=active]:text-white font-bold text-sm px-4 py-3 rounded-lg transition-all duration-300 hover:bg-blue-100 dark:hover:bg-gray-700 text-center min-h-[80px] flex flex-col justify-center gap-1"
                    title={tab.description}
                  >
                    <div className="text-lg">{tab.icon}</div>
                    <div className="font-semibold">{tab.label}</div>
                    {dataCount > 0 && (
                      <div className="text-xs opacity-75">
                        {dataCount} –±–ª–æ–∫{dataCount === 1 ? '' : dataCount < 5 ? '–∞' : '–æ–≤'}
                      </div>
                    )}
                  </TabsTrigger>
                );
              })}
            </TabsList>
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
        <div className="tabs-content">
          {availableTabs.map(tab => {
            const TabComponent = tab.component;
            return (
              <TabsContent 
                key={tab.id} 
                value={tab.id}
                className="mt-0 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2"
              >
                <div className="tab-content-wrapper bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª–∞–¥–∫–∏ */}
                  <div className="tab-header bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-800 px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">{tab.icon}</span>
                      <div>
                        <h3 className="text-xl font-bold text-gray-800 dark:text-gray-200">
                          {tab.label}
                        </h3>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          {tab.description}
                        </p>
                      </div>
                    </div>
                  </div>
                  
                  {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ */}
                  <div className="tab-content p-6 min-h-[500px]">
                    <TabComponent element={element} />
                  </div>
                </div>
              </TabsContent>
            );
          })}
        </div>
      </Tabs>
    </div>
  );
};

export default ElementDetailsContent;
