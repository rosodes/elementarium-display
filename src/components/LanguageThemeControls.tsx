
import { useValidatedTranslation } from '@/hooks/useValidatedTranslation';
import { useLanguage } from '@/context/LanguageContext';
import { useTheme } from '@/context/ThemeContext';
import { Button } from '@/components/ui/button';
import { Moon, Sun } from 'lucide-react';
import React from "react";
import { useLocation, useNavigate } from 'react-router-dom';
import LanguageSelector from './LanguageSelector';

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫: emoji –∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤, –¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏
const languageMeta: Record<string, { name: string; emoji: string }> = {
  en:      { name: "English", emoji: "üá¨üáß" },
  "zh-CN": { name: "ÁÆÄ‰Ωì‰∏≠Êñá (Chinese, Simplified)", emoji: "üá®üá≥" },
  "zh-TW": { name: "ÁπÅÈ´î‰∏≠Êñá (Chinese, Traditional)", emoji: "üáπüáº" },
  es:      { name: "Espa√±ol (Spanish)", emoji: "üá™üá∏" },
  hi:      { name: "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä (Hindi)", emoji: "üáÆüá≥" },
  ar:      { name: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ© (Arabic)", emoji: "üá¶üá™" },
  "pt-BR": { name: "Portugu√™s (Brazilian)", emoji: "üáßüá∑" },
  "pt-PT": { name: "Portugu√™s (European)", emoji: "üáµüáπ" },
  bn:      { name: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ (Bengali)", emoji: "üáßüá©" },
  ru:      { name: "–†—É—Å—Å–∫–∏–π", emoji: "üá∑üá∫" },
  ja:      { name: "Êó•Êú¨Ë™û (Japanese)", emoji: "üáØüáµ" },
  pa:      { name: "‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä (Punjabi)", emoji: "üáÆüá≥" },
  de:      { name: "Deutsch (German)", emoji: "üá©üá™" },
  jv:      { name: "Basa Jawa (Javanese)", emoji: "üáÆüá©" },
  lah:     { name: "ŸÑ€ÅŸÜÿØÿß (Western Punjabi)", emoji: "üáµüá∞" },
  tr:      { name: "T√ºrk√ße (Turkish)", emoji: "üáπüá∑" },
  "fr-FR": { name: "Fran√ßais (French, European)", emoji: "üá´üá∑" },
  "fr-CA": { name: "Fran√ßais (French, Canada)", emoji: "üá®üá¶" },
  vi:      { name: "Ti·∫øng Vi·ªát (Vietnamese)", emoji: "üáªüá≥" },
  ta:      { name: "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)", emoji: "üáÆüá≥" },
  ur:      { name: "ÿßŸèÿ±ÿØŸèŸà‚Äé (Urdu)", emoji: "üáµüá∞" },
  fa:      { name: "ŸÅÿßÿ±ÿ≥€å (Persian/Farsi)", emoji: "üáÆüá∑" },
  ml:      { name: "‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç (Malayalam)", emoji: "üáÆüá≥" },
  ko:      { name: "ÌïúÍµ≠Ïñ¥ (Korean)", emoji: "üá∞üá∑" },
  it:      { name: "Italiano (Italian)", emoji: "üáÆüáπ" },
  th:      { name: "‡πÑ‡∏ó‡∏¢ (Thai)", emoji: "üáπüá≠" },
  gu:      { name: "‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä (Gujarati)", emoji: "üáÆüá≥" },
  pl:      { name: "Polski (Polish)", emoji: "üáµüá±" },
  uk:      { name: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ (Ukrainian)", emoji: "üá∫üá¶" },
  kn:      { name: "‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)", emoji: "üáÆüá≥" },
  sw:      { name: "Kiswahili (Swahili)", emoji: "üá∞üá™" },
  ary:     { name: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ© (Moroccan Arabic)", emoji: "üá≤üá¶" },
  af:      { name: "Afrikaans (Afrikaans)", emoji: "üáøüá¶" },
  tl:      { name: "Tagalog (Filipino)", emoji: "üáµüá≠" },
  fil:     { name: "Filipino (Tagalog)", emoji: "üáµüá≠" },
  eu:      { name: "Euskara (Basque)", emoji: "üá™üá∏" },
  su:      { name: "Basa Sunda (Sundanese)", emoji: "üáÆüá©" },
  ha:      { name: "Hausa (Hausa)", emoji: "üá≥üá¨" },
  ro:      { name: "Rom√¢nƒÉ (Romanian)", emoji: "üá∑üá¥" },
  nl:      { name: "Nederlands (Dutch)", emoji: "üá≥üá±" },
  el:      { name: "ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨ (Greek)", emoji: "üá¨üá∑" },
  "sr-Cyrl": { name: "–°—Ä–ø—Å–∫–∏ (Serbian Cyrillic)", emoji: "üá∑üá∏" },
  "sr-Latn": { name: "Srpski (Serbian Latin)", emoji: "üá∑üá∏" },
  sl:      { name: "Sloven≈°ƒçina (Slovenian)", emoji: "üá∏üáÆ" },
  sk:      { name: "Slovenƒçina (Slovak)", emoji: "üá∏üá∞" },
};

interface LanguageThemeControlsProps {
  compact?: boolean;
}

const LanguageThemeControls = ({ compact = false }: LanguageThemeControlsProps) => {
  const { t } = useValidatedTranslation('LanguageThemeControls');
  const { language, setLanguage, supportedLanguages } = useLanguage();
  const { theme, toggleTheme } = useTheme();
  const navigate = useNavigate();
  const location = useLocation();

  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –¥–ª—è LanguageSelector:
  const allLanguageOptions = React.useMemo(() => {
    // –ö–ª—é—á–∏ —Ç–æ–ª—å–∫–æ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ (–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
    return supportedLanguages.map((code) => {
      const meta = languageMeta[code];
      return {
        code,
        name: meta?.name || code,
        emoji: meta?.emoji || "üåê"
      }
    });
  }, [supportedLanguages]);

  // URL update logic when changing language
  const changeLanguageAndUpdateUrl = (newLang: string) => {
    setLanguage(newLang);
    const pathParts = location.pathname.split('/').filter(Boolean);
    let newPathParts: string[] = [];
    if (pathParts.length > 0 && supportedLanguages.includes(pathParts[0])) {
      if (newLang === 'en') {
        newPathParts = pathParts.slice(1);
      } else {
        newPathParts = [newLang, ...pathParts.slice(1)];
      }
    } else {
      if (newLang !== 'en') {
        newPathParts = [newLang, ...pathParts];
      } else {
        newPathParts = [...pathParts];
      }
    }
    const newPath = newPathParts.length === 0 ? '/' : `/${newPathParts.join('/')}`;
    navigate(newPath);
  };

  return (
    <div className={`flex items-center ${compact ? 'gap-1' : 'gap-3'} ml-auto`}>
      {/* Language selector —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–º–∏ —è–∑—ã–∫–∞–º–∏ */}
      <LanguageSelector
        language={language}
        supportedLanguages={supportedLanguages}
        allLanguageOptions={allLanguageOptions}
        onChange={changeLanguageAndUpdateUrl}
        t={{
          selectLanguage: t('selectLanguage', 'Select Language'),
          searchLanguage: t('ui.searchPlaceholder', 'Search language‚Ä¶'),
          noLanguagesFound: t('ui.noResults', 'Nothing found')
        }}
      />
      {/* Theme toggle button */}
      <Button
        variant="outline"
        size={compact ? "sm" : "icon"}
        onClick={toggleTheme}
        aria-label={t('toggleTheme', 'Toggle theme')}
        className="text-gray-800 dark:text-gray-200 border-gray-300 dark:border-gray-700"
      >
        {theme === 'light' ? (
          <Moon className="h-[1.2rem] w-[1.2rem]" />
        ) : (
          <Sun className="h-[1.2rem] w-[1.2rem]" />
        )}
        <span className="sr-only">{t('toggleTheme', 'Toggle theme')}</span>
      </Button>
    </div>
  );
};

export default LanguageThemeControls;
